import { Express } from 'express';
import { Address } from '@ton/core';
import { pool } from '../database/database';
import { tonapi } from '../services/tonapi';
import * as fs from 'fs';
import * as path from 'path';

// Load whitelist
const whitelistPath = path.join(__dirname, '../whitelist.json');
const whitelist = JSON.parse(fs.readFileSync(whitelistPath, 'utf-8')).collections;

export function publicApiRoutes(app: Express) {
  // Get all collections with statistics
  app.get('/api/collections', async (req, res) => {
    try {
      const collectionsQuery = `
        SELECT 
          c.address,
          c.name,
          c.image,
          c.description,
          COALESCE(SUM(l.count), 0) as total_listens
        FROM collections c
        LEFT JOIN listens l ON c.address = l.collection_address
        WHERE c.address = ANY($1)
        GROUP BY c.address, c.name, c.image, c.description
        ORDER BY total_listens DESC
      `;
      
      const result = await pool.query(collectionsQuery, [whitelist]);
      
      const collections = result.rows.map(row => ({
        address: row.address,
        name: row.name,
        image: row.image,
        description: row.description,
        totalListens: parseInt(row.total_listens) || 0
      }));

      res.json({ collections });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // Get top NFTs in collection
  app.get('/api/collections/:address/top-nfts', async (req, res) => {
    try {
      const { address } = req.params;
      const limit = parseInt(req.query.limit as string) || 7;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤ whitelist
      if (!whitelist.includes(address)) {
        return res.status(404).json({ error: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      const topNftsQuery = `
        SELECT 
          n.address,
          n.index_number as index,
          n.metadata,
          n.collection_address,
          c.name as collection_name,
          COALESCE(l.count, 0) as listens
        FROM nfts n
        LEFT JOIN listens l ON n.address = l.nft_address
        LEFT JOIN collections c ON n.collection_address = c.address
        WHERE n.collection_address = $1 AND COALESCE(l.count, 0) > 0
        ORDER BY listens DESC, n.index_number ASC
        LIMIT $2
      `;

      const result = await pool.query(topNftsQuery, [address, limit]);
      
      const nfts = result.rows.map(row => ({
        address: row.address,
        index: row.index,
        metadata: row.metadata || {},
        collection: {
          name: row.collection_name,
          address: row.collection_address
        },
        listens: parseInt(row.listens) || 0
      }));

      res.json({ nfts });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø NFT:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // Get NFTs statistics for collection
  app.get('/api/collections/:address/nfts-stats', async (req, res) => {
    try {
      const { address } = req.params;
      const limit = parseInt(req.query.limit as string) || 100;
      const offset = parseInt(req.query.offset as string) || 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤ whitelist
      if (!whitelist.includes(address)) {
        return res.status(404).json({ error: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ whitelist' });
      }

      console.log('üìä –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:', {
        collectionAddress: address,
        limit,
        offset
      });

      const client = await pool.connect();
      try {
        // –ü–æ–ª—É—á–∞–µ–º NFT –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const dbNftsQuery = `
          SELECT 
            n.address,
            n.index_number as index,
            n.metadata,
            n.collection_address,
            c.name as collection_name,
            COALESCE(l.count, 0) as listens
          FROM nfts n
          LEFT JOIN listens l ON n.address = l.nft_address
          LEFT JOIN collections c ON n.collection_address = c.address
          WHERE n.collection_address = $1
          ORDER BY listens DESC, n.index_number ASC
          LIMIT $2 OFFSET $3
        `;

        const dbResult = await client.query(dbNftsQuery, [address, limit, offset]);
        let nfts = dbResult.rows;

        console.log('üîç NFT –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', nfts.length);

        // –ï—Å–ª–∏ –≤ –±–∞–∑–µ –º–∞–ª–æ NFT, –¥–æ–ø–æ–ª–Ω—è–µ–º –∏–∑ TON API
        if (nfts.length < 10) {
          try {
            console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ NFT –∏–∑ TON API...');
            
            const collectionInfo = await tonapi.nft.getNftCollection(address);
            let apiNfts: any[] = [];
            try {
              const nftItems = await tonapi.nft.getItemsFromCollection(address, {
                limit: Math.max(50, limit),
                offset: 0
              });
              apiNfts = nftItems.nft_items || [];
            } catch (apiError) {
              console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å NFT —á–µ—Ä–µ–∑ getItemsFromCollection');
            }

            console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ NFT –∏–∑ API:', apiNfts.length);

            // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const nftMap = new Map<string, any>();

            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º NFT –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            nfts.forEach(nft => {
              nftMap.set(nft.address, {
                address: nft.address,
                index: nft.index,
                metadata: nft.metadata,
                collection_address: address,
                collection_name: collectionInfo.metadata?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è',
                listens: parseInt(nft.listens) || 0
              });
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ NFT –∏–∑ API
            apiNfts.forEach(apiNft => {
              if (!apiNft.address) {
                console.warn('‚ö†Ô∏è NFT –±–µ–∑ –∞–¥—Ä–µ—Å–∞:', apiNft);
                return;
              }

              let nftAddress = Address.parse(apiNft.address).toString();
              
              if (!nftMap.has(nftAddress)) {
                nftMap.set(nftAddress, {
                  address: nftAddress,
                  index: apiNft.index || 0,
                  metadata: apiNft.metadata || {},
                  collection_address: address,
                  collection_name: collectionInfo.metadata?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è',
                  listens: 0
                });
              }
            });

            nfts = Array.from(nftMap.values());

          } catch (apiError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT –∏–∑ TON API:', apiError);
          }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∏ –∏–Ω–¥–µ–∫—Å—É
        nfts.sort((a, b) => {
          const listensA = parseInt(a.listens) || 0;
          const listensB = parseInt(b.listens) || 0;
          if (listensA !== listensB) {
            return listensB - listensA;
          }
          const indexA = a.index || 0;
          const indexB = b.index || 0;
          return indexA - indexB;
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        const paginatedNfts = nfts.slice(offset, offset + limit);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const formattedNfts = paginatedNfts.map(nft => ({
          address: nft.address,
          index: nft.index,
          metadata: typeof nft.metadata === 'string' ? JSON.parse(nft.metadata) : nft.metadata,
          collection: {
            name: nft.collection_name,
            address: nft.collection_address
          },
          listens: parseInt(nft.listens) || 0
        }));

        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞:', {
          totalFound: nfts.length,
          returned: formattedNfts.length,
          withListens: formattedNfts.filter(n => n.listens > 0).length,
          withoutListens: formattedNfts.filter(n => n.listens === 0).length
        });

        res.json({ 
          nfts: formattedNfts,
          total: nfts.length,
          hasMore: (offset + limit) < nfts.length
        });

      } finally {
        client.release();
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  });

  // Record listen (legacy endpoint)
  app.post('/api/listens', async (req, res) => {
    try {
      const { nftAddress, collectionAddress } = req.body;

      console.log('üìä –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (legacy):', {
        nftAddress,
        collectionAddress,
        timestamp: new Date().toISOString()
      });

      if (!nftAddress || !collectionAddress) {
        console.warn('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        return res.status(400).json({ 
          error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã nftAddress –∏ collectionAddress' 
        });
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å–∞
      let normalizedNftAddress: string;
      let normalizedCollectionAddress: string;

      try {
        normalizedNftAddress = Address.parse(nftAddress).toString();
        normalizedCollectionAddress = Address.parse(collectionAddress).toString();
      } catch (addressError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–æ–≤:', addressError);
        return res.status(400).json({ 
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ NFT –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏' 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤ whitelist
      if (!whitelist.includes(normalizedCollectionAddress)) {
        console.warn('‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –≤ whitelist:', normalizedCollectionAddress);
        return res.status(404).json({ error: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ whitelist' });
      }

      const client = await pool.connect();
      try {
        await client.query('BEGIN');

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ NFT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ nfts
        let nftMetadata = {};
        
        const existingNft = await client.query('SELECT address, metadata FROM nfts WHERE address = $1', [normalizedNftAddress]);
        
        if (existingNft.rows.length === 0) {
          console.log('üîç NFT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', normalizedNftAddress);
          
          try {
            const nftInfo = await tonapi.nft.getNftItemByAddress(normalizedNftAddress);
            nftMetadata = nftInfo.metadata || {};
            console.log('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è NFT:', nftInfo.metadata?.name || normalizedNftAddress);
          } catch (apiError) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è NFT', normalizedNftAddress);
            nftMetadata = {
              name: `NFT ${normalizedNftAddress.slice(-6)}`,
              description: 'NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏'
            };
          }

          await client.query(`
            INSERT INTO nfts (address, collection_address, metadata, first_listen, updated_at)
            VALUES ($1, $2, $3, NOW(), NOW())
          `, [normalizedNftAddress, normalizedCollectionAddress, JSON.stringify(nftMetadata)]);

          console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å NFT –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        } else {
          console.log('üìã NFT —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          
          await client.query(`
            UPDATE nfts 
            SET collection_address = $1, updated_at = NOW()
            WHERE address = $2
          `, [normalizedCollectionAddress, normalizedNftAddress]);
        }

        // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        const listenResult = await client.query(`
          INSERT INTO listens (nft_address, collection_address, count, last_updated)
          VALUES ($1, $2, 1, NOW())
          ON CONFLICT (nft_address)
          DO UPDATE SET 
            count = listens.count + 1,
            last_updated = NOW()
          RETURNING count
        `, [normalizedNftAddress, normalizedCollectionAddress]);

        const newCount = listenResult.rows[0]?.count || 1;

        await client.query('COMMIT');            
        
        res.json({ 
          success: true, 
          count: newCount,
          message: '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ'
        });
        
      } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', error);
        throw error;
      } finally {
        client.release();
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  });

  // Get general statistics
  app.get('/api/stats', async (req, res) => {
    try {
      const statsQuery = `
        SELECT 
          COUNT(DISTINCT l.nft_address) as total_nfts_listened,
          SUM(l.count) as total_listens,
          COUNT(DISTINCT l.collection_address) as total_collections
        FROM listens l
        WHERE l.collection_address = ANY($1)
      `;
      
      const result = await pool.query(statsQuery, [whitelist]);
      const stats = result.rows[0];

      res.json({
        totalNftsListened: parseInt(stats.total_nfts_listened) || 0,
        totalListens: parseInt(stats.total_listens) || 0,
        totalCollections: parseInt(stats.total_collections) || 0
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // Get sync status
  app.get('/api/sync-status', async (req, res) => {
    try {
      const collectionsQuery = `
        SELECT 
          COUNT(*) as total_collections,
          COUNT(CASE WHEN updated_at > NOW() - INTERVAL '24 hours' THEN 1 END) as recently_updated_collections
        FROM collections
      `;
      
      const nftsQuery = `
        SELECT 
          COUNT(*) as total_nfts,
          COUNT(CASE WHEN updated_at > NOW() - INTERVAL '24 hours' THEN 1 END) as recently_updated_nfts
        FROM nfts
      `;
      
      const listensQuery = `
        SELECT 
          COUNT(*) as total_listens_records,
          SUM(count) as total_listens
        FROM listens
      `;
      
      const [collectionsResult, nftsResult, listensResult] = await Promise.all([
        pool.query(collectionsQuery),
        pool.query(nftsQuery),
        pool.query(listensQuery)
      ]);

      const { getLastSyncTime, getSyncInProgress } = await import('../services/syncService');

      res.json({
        collections: {
          total: parseInt(collectionsResult.rows[0].total_collections) || 0,
          recentlyUpdated: parseInt(collectionsResult.rows[0].recently_updated_collections) || 0
        },
        nfts: {
          total: parseInt(nftsResult.rows[0].total_nfts) || 0,
          recentlyUpdated: parseInt(nftsResult.rows[0].recently_updated_nfts) || 0
        },
        listens: {
          totalRecords: parseInt(listensResult.rows[0].total_listens_records) || 0,
          totalListens: parseInt(listensResult.rows[0].total_listens) || 0
        },
        whitelistSize: whitelist.length,
        lastSyncTime: getLastSyncTime()?.toISOString() || null,
        syncInProgress: getSyncInProgress()
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
}