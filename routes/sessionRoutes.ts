import { Express } from 'express';
import { Address, Cell, loadStateInit } from '@ton/core';
import * as jwt from 'jsonwebtoken';
import { SignDataService } from '../services/signDataService';
import { 
  checkSession, 
  detectSuspiciousActivity,
  addSession,
  getUserSession,
  getSession
} from '../middleware/middleware';
import { pool } from '../database/database';
import { tonapi } from '../services/tonapi';
import * as fs from 'fs';
import * as path from 'path';

const backendSecret = process.env.BACKEND_SECRET || 'MY_SECRET_FROM_ENV';
const musicBackendUrl = process.env.MUSIC_BACKEND_URL || 'http://localhost:8000';

// Load whitelist
const whitelistPath = path.join(__dirname, '../whitelist.json');
const whitelist = JSON.parse(fs.readFileSync(whitelistPath, 'utf-8')).collections;

const signDataService = new SignDataService();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ StateInit
function tryParsePublicKey(stateInit: any): Buffer | null {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ data —è—á–µ–π–∫–∏ StateInit
    if (stateInit.data && stateInit.data.bits) {
      const dataSlice = stateInit.data.beginParse();
      
      // –î–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤ v3/v4 –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ seqno (32 –±–∏—Ç–∞)
      try {
        dataSlice.loadUint(32); // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º seqno
        const publicKey = dataSlice.loadBuffer(32); // –∑–∞–≥—Ä—É–∂–∞–µ–º 32 –±–∞–π—Ç–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        return publicKey;
      } catch (parseError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ data:', parseError);
      }
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ StateInit:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∫–æ—à–µ–ª—å–∫–∞
async function getWalletPublicKey(address: string): Promise<Buffer | null> {
  try {
    console.log('üîë –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ get-–º–µ—Ç–æ–¥:', address);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ get_public_key –º–µ—Ç–æ–¥
    try {
      const getMethodResult = await tonapi.blockchain.execGetMethodForBlockchainAccount(
        address,
        'get_public_key'
      );
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç get_public_key:', getMethodResult);
      
      if (getMethodResult.stack && getMethodResult.stack.length > 0) {
        const publicKeyItem = getMethodResult.stack[0];
        console.log('üîç –≠–ª–µ–º–µ–Ω—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞:', publicKeyItem);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏
        const item = publicKeyItem as any;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if (item.type === 'num' && item.num) {
          const publicKeyBigInt = BigInt(item.num);
          const publicKeyHex = publicKeyBigInt.toString(16).padStart(64, '0');
          const publicKeyBuffer = Buffer.from(publicKeyHex, 'hex');
          console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ get_public_key (num), –¥–ª–∏–Ω–∞:', publicKeyBuffer.length);
          return publicKeyBuffer;
        } else if (item.type === 'cell' && item.cell) {
          try {
            const cell = Cell.fromBase64(item.cell.bytes || item.cell);
            const slice = cell.beginParse();
            const publicKeyBuffer = slice.loadBuffer(32);
            console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ get_public_key (cell), –¥–ª–∏–Ω–∞:', publicKeyBuffer.length);
            return publicKeyBuffer;
          } catch (cellParseError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cell —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º:', cellParseError);
          }
        } else if (item.value || item.number) {
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          const value = item.value || item.number;
          const publicKeyBigInt = BigInt(value);
          const publicKeyHex = publicKeyBigInt.toString(16).padStart(64, '0');
          const publicKeyBuffer = Buffer.from(publicKeyHex, 'hex');
          console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ get_public_key (value), –¥–ª–∏–Ω–∞:', publicKeyBuffer.length);
          return publicKeyBuffer;
        }
        
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–µ–∫–∞:', item);
      }
    } catch (getMethodError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ get_public_key:', getMethodError);
    }

    console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address);
    return null;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
    return null;
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface SignDataRequest {
  signature: string;
  address: string;
  timestamp: number;
  domain: string;
  payload: {
    type: 'text';  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–π —Ç–∏–ø
    text: string;
  };
  public_key: string;
  walletStateInit: string;
}

interface NftListenRequest {
  nftAddress: string;
  timestamp: number;
}

interface SessionData {
  sessionId: string;
  userAddress: string;
  createdAt: Date;
  expiresAt: Date;
  signatureVerified: boolean;
}

export function sessionRoutes(app: Express) {
  // Create listening session
  app.post('/api/session/create', async (req, res) => {
    try {
      const signData: SignDataRequest = req.body;

      console.log('üîê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', {
        address: signData.address,
        domain: signData.domain,
        timestamp: signData.timestamp
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (!signData.signature || !signData.address || !signData.timestamp || !signData.domain || !signData.payload) {
        return res.status(400).json({ error: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø payload
      if (signData.payload.type !== 'text' || !signData.payload.text) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∏' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
      const nowTimestamp = Math.floor(Date.now() / 1000);
      if (nowTimestamp - signData.timestamp > 5 * 60) {
        return res.status(400).json({ error: '–ü–æ–¥–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const expectedText = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. –ü–æ–¥–ø–∏—Å—ã–≤–∞—è —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —á–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT-–∞—É–¥–∏–æ –≤ —Ä–∞–º–∫–∞—Ö –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–µ–≥–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. \n–°–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è 1 —á–∞—Å.\n\nPatternsNft";
      
      if (signData.payload.text !== expectedText) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å
      let normalizedAddress: string;
      try {
        normalizedAddress = Address.parse(signData.address).toString();
      } catch (error) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingSessionId = getUserSession(normalizedAddress);
      if (existingSessionId) {
        const existingSession = getSession(existingSessionId);
        if (existingSession && new Date() < existingSession.expiresAt) {
          console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é');
          return res.json({
            sessionId: existingSessionId,
            musicServerUrl: musicBackendUrl,
            expiresAt: existingSession.expiresAt.toISOString()
          });
        }
      }

      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: –ø—Ä–∏–≤–æ–¥–∏–º payload –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
      const signDataPayload = {
        type: 'text' as const,
        text: signData.payload.text
      };
      
      const isValidSignature = await signDataService.checkSignData({
        signature: signData.signature,
        address: normalizedAddress,
        timestamp: signData.timestamp,
        domain: signData.domain,
        payload: signDataPayload,
        public_key: signData.public_key,
        walletStateInit: signData.walletStateInit
      }, getWalletPublicKey); // –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞

      if (!isValidSignature) {
        console.warn('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è');
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }

      console.log('‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const sessionId = jwt.sign({
        address: normalizedAddress,
        domain: signData.domain,
        timestamp: signData.timestamp,
        type: 'listening_session'
      }, backendSecret);

      const currentTime = new Date();
      const expiresAt = new Date(currentTime.getTime() + 60 * 60 * 1000); // 1 —á–∞—Å

      const sessionData: SessionData = {
        sessionId,
        userAddress: normalizedAddress,
        createdAt: currentTime,
        expiresAt,
        signatureVerified: true
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
      addSession(sessionId, sessionData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      try {
        await pool.query(`
          INSERT INTO listening_sessions (session_id, user_address, signature_data, created_at, expires_at)
          VALUES ($1, $2, $3, $4, $5)
        `, [
          sessionId, 
          normalizedAddress, 
          JSON.stringify(signData), 
          currentTime, 
          expiresAt
        ]);
      } catch (dbError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –ë–î:', dbError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ë–î
      }

      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
        sessionId: sessionId.slice(0, 20) + '...',
        userAddress: normalizedAddress,
        expiresAt: expiresAt.toISOString()
      });

      res.json({
        sessionId,
        musicServerUrl: musicBackendUrl,
        expiresAt: expiresAt.toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  });

  // Validate session
  app.post('/api/session/validate', checkSession, (req, res) => {
    const session = (req as any).session;
    res.json({
      valid: true,
      address: session.userAddress,
      expiresAt: session.expiresAt.toISOString()
    });
  });

  // Record listen with session
  app.post('/api/session-listens', checkSession, async (req, res) => {
    try {
      const session = (req as any).session as SessionData;
      const { nftAddress, timestamp }: NftListenRequest = req.body;

      console.log('üìä –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', {
        nftAddress,
        timestamp,
        userAddress: session.userAddress,
        sessionAge: Date.now() - session.createdAt.getTime()
      });

      if (!nftAddress || !timestamp) {
        return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã nftAddress –∏ timestamp' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–Ω–µ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç –∏ –Ω–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ)
      const currentTimestamp = Date.now();
      const timeDiff = Math.abs(currentTimestamp - timestamp);
      if (timeDiff > 10 * 60 * 1000) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞' });
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å NFT
      let normalizedNftAddress: string;
      try {
        normalizedNftAddress = Address.parse(nftAddress).toString();
      } catch (error) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ NFT' });
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      let collectionAddress: string;
      try {
        const nftInfo = await tonapi.nft.getNftItemByAddress(normalizedNftAddress);
        if (!nftInfo.collection?.address) {
          return res.status(400).json({ error: 'NFT –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏' });
        }
        
        collectionAddress = Address.parse(nftInfo.collection.address).toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤ whitelist
        if (!whitelist.includes(collectionAddress)) {
          return res.status(403).json({ error: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è' });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NFT:', error);
        return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT' });
      }

      // –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const suspiciousActivity = await detectSuspiciousActivity(session.userAddress, normalizedNftAddress, timestamp);
      if (suspiciousActivity.isSuspicious) {
        console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', suspiciousActivity.reason);
        return res.status(429).json({ 
          error: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          reason: suspiciousActivity.reason
        });
      }

      const client = await pool.connect();
      try {
        await client.query('BEGIN');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const lastListenQuery = `
          SELECT last_recorded, count
          FROM session_listens
          WHERE user_address = $1 AND nft_address = $2
          ORDER BY last_recorded DESC
          LIMIT 1
        `;
        
        const lastListenResult = await client.query(lastListenQuery, [session.userAddress, normalizedNftAddress]);
        
        if (lastListenResult.rows.length > 0) {
          const lastListen = lastListenResult.rows[0];
          const timeSinceLastListen = timestamp - new Date(lastListen.last_recorded).getTime();
          
          // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
          if (timeSinceLastListen < 30000) {
            await client.query('ROLLBACK');
            return res.status(429).json({ error: '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è' });
          }
        }

        // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sessionListenResult = await client.query(`
          INSERT INTO session_listens (user_address, nft_address, collection_address, session_id, count, last_recorded)
          VALUES ($1, $2, $3, $4, 1, to_timestamp($5 / 1000.0))
          ON CONFLICT (user_address, nft_address)
          DO UPDATE SET 
            count = session_listens.count + 1,
            last_recorded = to_timestamp($5 / 1000.0),
            session_id = $4
          RETURNING count
        `, [session.userAddress, normalizedNftAddress, collectionAddress, session.sessionId, timestamp]);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
        await client.query(`
          INSERT INTO nfts (address, collection_address, metadata, first_listen, updated_at)
          VALUES ($1, $2, '{}', NOW(), NOW())
          ON CONFLICT (address) 
          DO UPDATE SET 
            collection_address = $2,
            updated_at = NOW()
        `, [normalizedNftAddress, collectionAddress]);

        await client.query(`
          INSERT INTO listens (nft_address, collection_address, count, last_updated)
          VALUES ($1, $2, 1, NOW())
          ON CONFLICT (nft_address)
          DO UPDATE SET 
            count = listens.count + 1,
            last_updated = NOW()
        `, [normalizedNftAddress, collectionAddress]);

        await client.query('COMMIT');

        const userListenCount = sessionListenResult.rows[0]?.count || 1;

        console.log('‚úÖ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', {
          userAddress: session.userAddress,
          nftAddress: normalizedNftAddress,
          userListenCount
        });

        res.json({
          success: true,
          userListenCount,
          message: '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ'
        });

      } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', error);
        throw error;
      } finally {
        client.release();
      }

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', error);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  });

  // Get user statistics
  app.get('/api/session/user-stats', checkSession, async (req, res) => {
    try {
      const session = (req as any).session as SessionData;
      
      const userStatsQuery = `
        SELECT 
          COUNT(DISTINCT nft_address) as unique_nfts_listened,
          COUNT(DISTINCT collection_address) as unique_collections,
          SUM(count) as total_listens,
          MAX(last_recorded) as last_activity
        FROM session_listens
        WHERE user_address = $1
      `;
      
      const result = await pool.query(userStatsQuery, [session.userAddress]);
      const stats = result.rows[0];
      
      res.json({
        userAddress: session.userAddress,
        uniqueNftsListened: parseInt(stats.unique_nfts_listened) || 0,
        uniqueCollections: parseInt(stats.unique_collections) || 0,
        totalListens: parseInt(stats.total_listens) || 0,
        lastActivity: stats.last_activity,
        sessionExpiresAt: session.expiresAt.toISOString()
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
}
