import { Express, Request, Response, NextFunction } from 'express';
import rateLimit from 'express-rate-limit';
import * as jsonwebtoken from 'jsonwebtoken';
import { pool } from '../database/database';
import { Address } from '@ton/core';

const backendSecret = process.env.BACKEND_SECRET || 'MY_SECRET_FROM_ENV';

// Rate limiters
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –õ–∏–º–∏—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP
  standardHeaders: true,
  legacyHeaders: false,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
  skip: (req) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è health-check —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    return req.path === '/health' || req.path === '/';
  }
});

const strictLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
  max: 10, // –°—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –¥–ª—è –≤–∞–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º'
});

const keysLimiter = rateLimit({
  windowMs: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  max: 20, // –õ–∏–º–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º'
});

// JWT middleware
export async function checkJWT(req: Request, res: Response, next: NextFunction) {
  const token = req.headers.authorization?.split('Bearer ')[1];

  if (!token) {
    res.sendStatus(401);
    return;
  }

  jsonwebtoken.verify(token, backendSecret, (err, decoded) => {
    if (err) {
      res.sendStatus(401);
      return;
    }

    (req as any).userAddress = decoded as string;
    next();
  });
}

// Session data interface
interface SessionData {
  sessionId: string;
  userAddress: string;
  createdAt: Date;
  expiresAt: Date;
  signatureVerified: boolean;
}

// In-memory session storage
const activeSessions = new Map<string, SessionData>();
const userSessions = new Map<string, string>(); // address -> sessionId

// Session cleanup interval
setInterval(() => {
  const now = new Date();
  for (const [sessionId, session] of activeSessions.entries()) {
    if (now > session.expiresAt) {
      activeSessions.delete(sessionId);
      userSessions.delete(session.userAddress);
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è: ${sessionId}`);
    }
  }
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// Session middleware
export async function checkSession(req: Request, res: Response, next: NextFunction) {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏' });
  }

  const sessionId = authHeader.split(' ')[1];
  const session = activeSessions.get(sessionId);

  if (!session) {
    return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è' });
  }

  if (new Date() > session.expiresAt) {
    activeSessions.delete(sessionId);
    userSessions.delete(session.userAddress);
    return res.status(401).json({ error: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' });
  }

  (req as any).session = session;
  next();
}

// User block check
export async function checkUserBlock(userAddress: string): Promise<{isBlocked: boolean, reason?: string}> {
  try {
    const blockQuery = `
      SELECT reason, blocked_until 
      FROM user_blocks 
      WHERE user_address = $1 
      AND is_active = TRUE 
      AND (blocked_until IS NULL OR blocked_until > NOW())
    `;

    const result = await pool.query(blockQuery, [userAddress]);
    
    if (result.rows.length > 0) {
      return {
        isBlocked: true,
        reason: result.rows[0].reason
      };
    }

    return { isBlocked: false };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    return { isBlocked: false }; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
  }
}

// Suspicious activity logger
export async function logSuspiciousActivity(
  userAddress: string, 
  activityType: string, 
  description: string, 
  severity: 'low' | 'medium' | 'high' | 'critical' = 'medium',
  metadata: any = {}
) {
  try {
    await pool.query(`
      INSERT INTO suspicious_activities (user_address, activity_type, description, severity, metadata)
      VALUES ($1, $2, $3, $4, $5)
    `, [userAddress, activityType, description, severity, JSON.stringify(metadata)]);

    console.log(`‚ö†Ô∏è –ó–∞–ø–∏—Å–∞–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityType} –¥–ª—è ${userAddress}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
  }
}

// Suspicious activity detection
export async function detectSuspiciousActivity(
  userAddress: string, 
  nftAddress: string, 
  timestamp: number
): Promise<{isSuspicious: boolean, reason?: string}> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const blockCheck = await checkUserBlock(userAddress);
    if (blockCheck.isBlocked) {
      return { 
        isSuspicious: true, 
        reason: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${blockCheck.reason}`
      };
    }

    const client = await pool.connect();
    
    try {
      const now = Date.now();
      const oneHourAgo = now - 60 * 60 * 1000;
      const oneDayAgo = now - 24 * 60 * 60 * 1000;

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      const hourlyListensQuery = `
        SELECT COUNT(*) as count
        FROM session_listens
        WHERE user_address = $1 
        AND last_recorded > to_timestamp($2 / 1000.0)
      `;
      
      const hourlyResult = await client.query(hourlyListensQuery, [userAddress, oneHourAgo]);
      const hourlyListens = parseInt(hourlyResult.rows[0]?.count || '0');
      
      if (hourlyListens > 50) {
        await logSuspiciousActivity(
          userAddress, 
          'excessive_hourly_listens', 
          `${hourlyListens} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∑–∞ —á–∞—Å`,
          'high',
          { hourlyListens, limit: 50 }
        );
        return { isSuspicious: true, reason: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –≤ —á–∞—Å' };
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å
      const dailyListensQuery = `
        SELECT COUNT(*) as count
        FROM session_listens
        WHERE user_address = $1 
        AND last_recorded > to_timestamp($2 / 1000.0)
      `;
      
      const dailyResult = await client.query(dailyListensQuery, [userAddress, oneDayAgo]);
      const dailyListens = parseInt(dailyResult.rows[0]?.count || '0');
      
      if (dailyListens > 500) {
        await logSuspiciousActivity(
          userAddress, 
          'excessive_daily_listens', 
          `${dailyListens} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å`,
          'critical',
          { dailyListens, limit: 500 }
        );
        return { isSuspicious: true, reason: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å' };
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö NFT
      const recentSameNftQuery = `
        SELECT COUNT(*) as count
        FROM session_listens
        WHERE user_address = $1 
        AND nft_address = $2
        AND last_recorded > to_timestamp($3 / 1000.0)
      `;
      
      const recentSameNftResult = await client.query(recentSameNftQuery, [userAddress, nftAddress, oneHourAgo]);
      const recentSameNftListens = parseInt(recentSameNftResult.rows[0]?.count || '0');
      
      if (recentSameNftListens > 10) {
        await logSuspiciousActivity(
          userAddress, 
          'excessive_same_nft_listens', 
          `${recentSameNftListens} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –æ–¥–Ω–æ–≥–æ NFT –∑–∞ —á–∞—Å`,
          'medium',
          { nftAddress, recentListens: recentSameNftListens, limit: 10 }
        );
        return { isSuspicious: true, reason: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –æ–¥–Ω–æ–≥–æ NFT' };
      }

      return { isSuspicious: false };
      
    } finally {
      client.release();
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    return { isSuspicious: false };
  }
}

// Session management functions
export function addSession(sessionId: string, sessionData: SessionData) {
  activeSessions.set(sessionId, sessionData);
  userSessions.set(sessionData.userAddress, sessionId);
}

export function getSession(sessionId: string): SessionData | undefined {
  return activeSessions.get(sessionId);
}

export function getUserSession(userAddress: string): string | undefined {
  return userSessions.get(userAddress);
}

export function removeSession(sessionId: string) {
  const session = activeSessions.get(sessionId);
  if (session) {
    activeSessions.delete(sessionId);
    userSessions.delete(session.userAddress);
  }
}

// Setup middleware
export function setupMiddleware(app: Express) {
  app.use(apiLimiter);
}

// Export rate limiters for specific routes
export { strictLimiter, keysLimiter };